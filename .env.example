# Save this file as ".env" at the root of the project

## Celery worker environment - needed for Celery workers *and* Django ##

# Is this a Celery worker?
IM_A_CELERY_WORKER=False

# Never have DEBUG=True in production!
DEBUG=False

# Where to save logs and results created in spawned containers
WORKER_LOGS_DIRECTORY='/path/to/workers/logs/here'
WORKER_RESULTS_DIRECTORY='/path/to/worker/results/here/'

# This is used to store ephemeral files. Currently this is limited to
# temporary JSON-encoded argument files that can be used by executable
# task types.
WORKER_TEMP_DIRECTORY='/path/to/workers/temp/files/here'

# Where to store saved Singularity images. Note that Docker
# automatically saves them in its own default directories; e.g., on
# Linux they'd be somewhere in /var/lib/docker/.
WORKER_SINGULARITY_IMAGES_DIRECTORY='/path/to/workers/singularity/images/here'

# These are settings for Celery (see
# http://docs.celeryproject.org/en/latest/userguide/configuration.html).
# Don't worry about CELERY_BROKER_POOL_LIMIT for workers.
CELERY_BROKER_POOL_LIMIT=None
CELERY_BROKER_URL='pyamqp://'
CELERY_TIMEZONE='UTC'

# Specify whether RabbitMQ is using SSL to talk
RABBITMQ_USES_SSL=False

# Specify how many seconds to wait for a Singularity pull to succeed,
# and how many times to retry this process
SINGULARITY_PULL_TIMEOUT=300
SINGULARITY_PULL_RETRIES=5

# Base URL of the site. Essentially just choose one of the hosts Django
# is hosted on prepended with its protocol (i.e., "http://" or
# "https://"). You can specify an IP here, too, with appropriate ports.
DJANGO_BASE_URL='http://127.0.0.1:8000'

# API auth token (see
# http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication)
# for details
API_AUTH_TOKEN='generatedauthtokenhere'

# Access token for Rollbar error tracking - you only really want this in
# production, and you might not want to enable this for a worker
PROJECT_USES_ROLLBAR=False
ROLLBAR_ACCESS_TOKEN='rollbarauthtokenhere'


## Django environment - no need to fill in for Celery workers ##

# The name of your saltant hosted project
PROJECT_NAME='saltant'

# Insert hosts, separated by commas. Wrap each host in single quotes,
# not double quotes.
ALLOWED_HOSTS='127.0.0.1',

# Keep this secret! Generate a key and put it here!
# https://www.miniwebtool.com/django-secret-key-generator/ was used to
# generate the key you see below.
SECRET_KEY='u-!+0mf3xgpg2es=i9r5o!7grf!@gt!x^(ta9p=m&oz3+l-wi#'

# Rollbar project URL - only specify if using Rollbar
ROLLBAR_PROJECT_URL='https://rollbar.com/mycompany/myproject/'

# RabbitMQ management URL
RABBITMQ_MANAGEMENT_URL='http://127.0.0.1:15672'

# Flower URL
FLOWER_URL='http://127.0.0.1:5555'

# JWT lifetimes (in days)
JWT_ACCESS_TOKEN_LIFETIME=3
JWT_REFRESH_TOKEN_LIFETIME=245

# Whether to favour the container or executable task class by default.
# Choose "CONTAINER" or "EXECUTABLE" here (case doesn't matter).
DEFAULT_TASK_CLASS='CONTAINER'

# Default time zone for the server. Note that all datetimes are stored
# in the PostgreSQL database as UTC, always.
TIME_ZONE='UTC'

# These are settings for the PostgreSQL database
DATABASE_NAME='saltant'
DATABASE_USER='johnsmith'
DATABASE_USER_PASSWORD='johnsmithspassword'
DATABASE_HOST='localhost'
DATABASE_PORT=''

# Email settings - this example uses a SendGrid example, but other
# providers will also work fine. Note that at present, email is not
# being used in saltant, so don't worry about this for now.
EMAIL_HOST='smtp.sendgrid.net'
EMAIL_HOST_USER='sendgrid_username'
EMAIL_HOST_PASSWORD='sendgrid_password'
EMAIL_PORT=587
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL='noreply@mydomain.com'

# AWS S3 settings for grabbing logs
AWS_ACCESS_KEY_ID=''
AWS_SECRET_ACCESS_KEY=''
AWS_LOGS_BUCKET_NAME=''
